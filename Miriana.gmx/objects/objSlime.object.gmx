<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSlime</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEnemyParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_hurt = true;
can_hurtTimer = 0;
damage_num = 0;

//Set up stats for Slime here
level = irandom_range(10,15);
maxHp = floor(21 * level);
hp = maxHp;
def = floor(1.3 * level);
str = 3*floor(level/1.7);
spd = 1+((level/10)/15);//Keeps the speed from hitting 2+ which is HIGH for a Slime
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Change Slime's color and AI per HP amount
imgSpd = spd/10;
if(hp &lt;= (45/2) &amp;&amp; hp &gt;= (45/4)) {
    SlimeAI((spd*1.3),imgSpd);
    image_blend = c_gray;
} else if(hp &lt; (45/4)) {
    SlimeAI((spd*1.7),imgSpd);
    image_blend = c_red;
} else {
    SlimeAI(spd,imgSpd);
}

//If Slime's HP falls to zero or below, it dies.
if(hp &lt;= 0) {
    with(self)
    {
        instance_destroy();
    }
}

//Set-up a temorary(short) invincibility after being damaged keeping itself from hitbox/collision error
if(can_hurt == false) {
    can_hurtTimer++;
}

if(can_hurtTimer &gt; 13) {
    can_hurtTimer = 0;
    can_hurt = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSlashBox3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(self) {
    damage_num = floor(irandom_range((objPlayer.str*1.7) - (self.def/3), (objPlayer.str*1.9) - (self.def/4)));
    
    //====Set-Up Critical Hits
    critTest = floor(irandom_range(1, 5));
    if(critTest &gt; 4 &amp;&amp; can_hurt == true) {
        critical = true;
    }
    
    if(critical == true) {
        damage_num = floor(damage_num * irandom_range(1.4, 4.5));
        instance_create(self.x, self.y - 100, objCriticalText);
        critical = false;
    }
    //====End Critical Set-Up
    
    if (damage_num &lt; 1) {
        damage_num = 0;
    }
    
    if (can_hurt == true) {
        //The damage is inflicted
        hp -= damage_num;
        
        //Shows damage taken
        instance_create(self.x, self.y - 50, global.drawFade[damageTextCounter]);
        global.drawFade[damageTextCounter].message = damage_num;        
        damageTextCounter++;
        if(damageTextCounter &gt; 4) {
            damageTextCounter = 0;
        }
        
        //Causes Knockback
        knock_back(0.5);
    }
}
can_hurt = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSlashBox2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(self) {
    damage_num = floor(irandom_range((objPlayer.str*1.2) - (self.def/2), (objPlayer.str*1.5) - (self.def/2)));
    
    //====Set-Up Critical Hits
    critTest = floor(irandom_range(1, 5));
    if(critTest &gt; 4 &amp;&amp; can_hurt == true) {
        critical = true;
    }
    
    if(critical == true) {
        damage_num = floor(damage_num * irandom_range(1.4, 4.5));
        instance_create(self.x, self.y - 100, objCriticalText);
        critical = false;
    }
    //====End Critical Set-Up
    
    if (damage_num &lt; 1) {
        damage_num = 0;
    }
    
    if (can_hurt == true) {
        //The damage is inflicted
        hp -= damage_num;
        
        //Shows damage taken
        instance_create(self.x, self.y - 50, global.drawFade[damageTextCounter]);
        global.drawFade[damageTextCounter].message = damage_num;        
        damageTextCounter++;
        if(damageTextCounter &gt; 4) {
            damageTextCounter = 0;
        }
        
        //Causes Knockback
        knock_back(1.1);
    }
}
can_hurt = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSlashBox">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(self) {
    //Calculations damage to give (floor keep it a whole number)
    damage_num = floor(irandom_range(objPlayer.str - (self.def/2), objPlayer.str*1.2 - (self.def/2)));
    
    //====Set-Up Critical Hits
    critTest = floor(irandom_range(1, 5));
    if(critTest &gt; 4 &amp;&amp; can_hurt == true) {
        critical = true;
    }
    
    if(critical == true) {
        damage_num = floor(damage_num * irandom_range(1.4, 4.5));
        instance_create(self.x, self.y - 100, objCriticalText);
        critical = false;
    }
    //====End Critical Set-Up
    
    if(damage_num &lt; 1) {
        damage_num = 0;
    }
    
    if(can_hurt == true) {
        //Takes Damage
        hp -= damage_num;
        
        //Shows damage taken as rising text
        instance_create(self.x, self.y - 50, global.drawFade[damageTextCounter]);
        global.drawFade[damageTextCounter].message = damage_num;        
        damageTextCounter++;
        
        if(damageTextCounter &gt; 4) {
            damageTextCounter = 0;
        }
        
        //Knockback
        knock_back(0.7);
    }
}
can_hurt = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(self) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,49</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
